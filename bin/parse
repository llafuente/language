#!/usr/bin/env node
"use strict";

var tokenizer = require("../lib/tokenizer.js"),
  parser = require("../lib/parser.js"),
  argv = require('yargs')
    .usage('Usage: $0 [options] files')
    .demand(1)

    .boolean("print-file")
    .default("print-file", false)

    .boolean("print-ast")
    .default("print-ast", true)

    .describe("v", "verbose")
    .boolean("v")
    .default("v", false)
    .argv,
  fs = require("fs"),
  path = require("path"),
  util = require("util"),
  chalk = require('chalk'),
  glob = require("glob"),
  files = [];

if (!!argv.v) {
    console.log(argv);
}

argv._.forEach(function(pattern) {
  glob(pattern, function(err, files) {
    if (err) {
      return console.error(err);
    }

    files.forEach(parse_file);
  });
});

function parse_file(file) {
  var code = require("fs").readFileSync(file, "utf-8");
  var tokens = tokenizer.parse(code, !!argv.v);
  var ranges = tokenizer.rangenize(tokens);
  try {
    var ast = parser(ranges, !!argv.v);

    console.log(util.inspect(ast, {depth: null, colors: true}));
  } catch(e) {
    console.log(e);
    console.log(e.stack);

    var err_data = e.parser;

    var lines = code.split("\n"),
    err_line = lines[err_data.line -1],
    chars = err_line.split(""),
    x = "",
    max = err_data.column + 8,
    i,
    pad = "      ",
    pad_i;

    if (chars.length > err_data.column) {
      chars[err_data.column - 1] = chalk.bgRed(chars[err_data.column - 1]);
    } else {
      chars[chars.length - 1] = chalk.bgRed(chars[chars.length - 1]);
    }

    console.log("file:", process.argv[2]);
    console.log("error context:");

    for(i = 0; i < max; ++i) {
      x+= " ";
    }

    max = Math.max(0, err_data.line - 5);
    for(i = max; i < err_data.line; ++i) {
      pad_i = pad.substring(0, pad.length - ("" + i).length) + i;

      if (err_data.line - 1 === i) {
        console.log(pad_i + " | " + chars.join(""));
      } else {
        console.log(pad_i + " | " + lines[i]);
      }
    }

    if (max + e.message.length < 80) {
      console.log(x + "^", chalk.bgRed(e.message));
    } else {
      console.log(x + "^\n", chalk.bgRed(e.message));
    }
    console.log("");

    max = Math.min(lines.length, err_data.line + 5);

    for(i = err_data.line; i < max; ++i) {
      pad_i = pad.substring(0, pad.length - ("" + i).length) + i;

      console.log(pad_i + " | " + lines[i]);
    }

  }
}
